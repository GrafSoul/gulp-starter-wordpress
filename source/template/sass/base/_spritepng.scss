// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$img-gulp-name: 'img-gulp';
$img-gulp-x: 370px;
$img-gulp-y: 0px;
$img-gulp-offset-x: -370px;
$img-gulp-offset-y: 0px;
$img-gulp-width: 157px;
$img-gulp-height: 310px;
$img-gulp-total-width: 736px;
$img-gulp-total-height: 407px;
$img-gulp-image: '/images/template/spritepng.png';
$img-gulp: (370px, 0px, -370px, 0px, 157px, 310px, 736px, 407px, '/images/template/spritepng.png', 'img-gulp', );
$img-html-name: 'img-html';
$img-html-x: 532px;
$img-html-y: 0px;
$img-html-offset-x: -532px;
$img-html-offset-y: 0px;
$img-html-width: 204px;
$img-html-height: 204px;
$img-html-total-width: 736px;
$img-html-total-height: 407px;
$img-html-image: '/images/template/spritepng.png';
$img-html: (532px, 0px, -532px, 0px, 204px, 204px, 736px, 407px, '/images/template/spritepng.png', 'img-html', );
$img-jade-name: 'img-jade';
$img-jade-x: 0px;
$img-jade-y: 0px;
$img-jade-offset-x: 0px;
$img-jade-offset-y: 0px;
$img-jade-width: 365px;
$img-jade-height: 138px;
$img-jade-total-width: 736px;
$img-jade-total-height: 407px;
$img-jade-image: '/images/template/spritepng.png';
$img-jade: (0px, 0px, 0px, 0px, 365px, 138px, 736px, 407px, '/images/template/spritepng.png', 'img-jade', );
$img-js-name: 'img-js';
$img-js-x: 0px;
$img-js-y: 143px;
$img-js-offset-x: 0px;
$img-js-offset-y: -143px;
$img-js-width: 191px;
$img-js-height: 264px;
$img-js-total-width: 736px;
$img-js-total-height: 407px;
$img-js-image: '/images/template/spritepng.png';
$img-js: (0px, 143px, 0px, -143px, 191px, 264px, 736px, 407px, '/images/template/spritepng.png', 'img-js', );
$spritesheet-width: 736px;
$spritesheet-height: 407px;
$spritesheet-image: '/images/template/spritepng.png';
$spritesheet-sprites: ($img-gulp, $img-html, $img-jade, $img-js, );
$spritesheet: (736px, 407px, '/images/template/spritepng.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
